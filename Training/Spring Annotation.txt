@SpringBootApplication - аннотация объединяет в себе 3 другие аннотации(@Configuration, @EnableAutoConfiguration, @ComponentScan)
@Configuration - указываем фреймворку Spring, что данный класс является конфигурационным,т.е. аналогом applicationContext.xml
@EnableAutoConfiguration - spring анализирует зависимости и на их основе конфигурирует проект.
@ComponentScan - указываем фреймворку Spring, в каких пакетах необходимо искать контроллеры и сервисы для их инициализации

@RestController - указываем,что класс может обрабатывать HTTP-REST запросы. Включает в себя аннотацию @ResponseBody
@ResponseBody - указываем фреймворку Spring, что возвращаемое значение метода должно быть упаковано в HTTP-ответ. Каждый метод контроллера обязан иметь эту аннотацию.
@RequestMapping - указываем на какой URL мапить тот или иной метод.

@XmlRootElement - можно аннотировать POJO-классы,тогда они смогут возвращаться как в виде json, так и в xml
@JsonIgnoreProperties(ignoreUnknown = true) - при маппинге объекта из веб-сервиса на свой объект игнорировать поля(не мапить),
названия которых не совпадают между собой. Аннотация является необязательной при маппинге ответа веб-сервиса на java-класс.
@JsonProperty(value = "название поля") - аннотация вешается на поле java-класса и указывает какое значение из ответа веб-сервиса 
должно быть намапленно на данное поле.

@Autowired - 
@Primary - маркер(или индикатор) того, что данному бину будет отданно предпочнение среди прочих. Если существует только один класс помеченный данной аннотацией, то он будет внедрен в качестве зависимости.